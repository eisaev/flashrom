Serial Flasher Protocol Specification - version 2 (0x01 return value == 2)

Command And Answer Sequence - all commands give an answer.
PC: COMMAND(8bit) <parameters determined by opcode>
DEV: ACK/TOKEN/NAK(8bit) <OPTIONAL RETURN BYTES (only if ACK/TOKEN)> / nothing
Command 0x10 (SYNCNOP) has a special return of NAK+ACK for synchronization.

ACK = 0x06
NAK = 0x15
TOKEN/TKN = 0x80 + token (0x80 - 0xFF)

Tokens are a 7-bit value that is cleared to 0 (represented on wire as 0x80) on boot of device
and are incremented on/after each token-reply; they roll over to 1 instead of 0.
See "About Tokens" for more.

All multibyte values are little-endian. Addresses are 32-bit and lengths are 24-bit.

COMMAND	Description			Parameters			Return Value
0x00	NOP				none				ACK
0x01	Query programmer iface version	none				ACK + 16bit version (nonzero)
0x02	Query supported commands bitmap	none				ACK + 32 bytes (256 bits) of supported cmds flags
0x03	Query programmer name		none				ACK + 16 bytes string (null padding) / NAK
0x04	Query serial buffer size	none				ACK + 16bit size / NAK
0x05	Query supported bustypes	none				ACK + 8-bit flags (as per flashrom) / NAK
0x06	Query connected address lines	none				ACK + 8bit line count / NAK
0x07	Query operation buffer size	none				ACK + 16bit size / NAK
0x08	Query maximum write-n length	none				ACK + 24bit length / NAK
0x09	Read byte			32-bit addr			TKN + BYTE / NAK
0x0A	Read n bytes			32-bit addr + 24-bit length	TKN + length bytes / NAK
0x0B	Initialize operation buffer	none				TKN / NAK
0x0C	Write to opbuf: Write byte	32-bit addr + 8-bit byte	TKN / NAK
0x0D	Write to opbuf: Write n		24-bit length + 32-bit addr +	TKN / NAK
					 + length bytes of data
0x0E	Write to opbuf: delay		32-bit usecs			TKN / NAK
0x0F	Execute operation buffer	none				TKN / NAK
0x10	Sync NOP			none				NAK + ACK (for synchronization)
0x11	Query maximum read-n length	none				ACK + 24-bit length / NAK
0x12	Set used bustype		8-bit flags (as with 0x05)	ACK / NAK
0x13	Perform SPI operation		24-bit slen + 24-bit rlen	TKN + rlen bytes of data / NAK
					 + slen bytes of data
0x14	Set SPI clock frequency in Hz	32-bit requested frequency	ACK + 32-bit set frequency / NAK
0x15	Toggle flash chip pin drivers	8-bit (0 disable, else enable)	ACK / NAK
0x16	Token NOP			none				ACK + TKN - existence used to indicate token support
0x17	Write to opbuf: poll		8-bit flags + 32-bit addr	TKN / NAK
0x18	Write to opbuf: poll w/ delay	as above + 32-bit usecs		TKN / NAK
0x??	unimplemented command - invalid.

0 is an invalid value for length of read n bytes or write n or return of query maximum write or read n length.

Additional information of the above commands:
	About unimplemented commands / startup sequence:
		Only commands allowed to be used without checking anything are 0x00,0x10 and 0x01 (NOP,SYNCNOP,Q_IFACE).
		If 0x01 doesn't return 1, dont do anything if you dont support a newer protocol.
		Then, check support for any other opcode (except 0x02) by using 0x02 (Q_CMDMAP).
	0x02 (Q_CMDMAP):
		The map's bits are mapped as follows:
		cmd 0 support: byte 0 bit 0
		cmd 1 support: byte 0 bit 1
		cmd 7 support: byte 0 bit 7
		cmd 8 support: byte 1 bit 0, and so on.
	0x04 (Q_SERBUF):
		If the programmer has a guaranteed working flow control,
		it should return a suitable transfer window size for the connection, eg. ~4k for usb-serial.
	0x05 (Q_BUSTYPE):
		The bit's are defined as follows:
		bit 0: PARALLEL, bit 1: LPC, bit 2: FWH, bit 3: SPI.
	0x06 (Q_CHIPSIZE):
		Only applicable to parallel programmers.
		An LPC/FWH/SPI-programmer can report this as not supported in the command bitmap.
	0x08 (Q_WRNMAXLEN):
		If a programmer reports a bigger maximum write-n length than the serial buffer size,
		it is assumed that the programmer can process the data fast enough to take in the
		reported maximum write-n without problems.
	0x0F (O_EXEC):
		Execute operation buffer will also clear it, regardless of the return value.
	0x11 (Q_RDNMAXLEN):
		If this command is not supported, assume return of 2^24 - 1.
	0x12 (S_BUSTYPE):
		Set's the used bustype if the programmer can support more than one flash protocol.
		Sending a byte with more than 1 bit set will make the programmer decide among them
		on it's own. Bit values as with Q_BUSTYPE.
	0x13 (O_SPIOP):
		Send and receive bytes via SPI.
		Maximum slen is Q_WRNMAXLEN in case Q_BUSTYPE returns SPI only or S_BUSTYPE was used
		to set SPI exclusively before. Same for rlen and Q_RDNMAXLEN.
		This operation is immediate, meaning it doesn't use the operation buffer.
	0x14 (S_SPI_FREQ):
		Set the SPI clock frequency. The 32-bit value indicates the
		requested frequency in Hertz. Value 0 is reserved and could
		be NAKed by the programmer, or handled like value 1 (minimum hz).
		The requested frequency should be mapped by the programmer software
		to a supported frequency lower than the one requested. If there is
		no lower frequency available the lowest possible should be used.
		The value chosen is sent back in the reply with an ACK.
	0x15 (S_CMD_S_PIN_STATE):
		Sets the state of the pin drivers connected to the flash chip. Disabling them allows other
		devices (e.g. a mainboard's chipset) to access the chip. This way the serprog controller can
		remain attached to the flash chip even when the board is running. The user is responsible to
		NOT connect VCC and other permanently externally driven signals to the programmer as needed.
		If the value is 0, then the drivers should be disabled, otherwise they should be enabled.
	0x17 and 0x18 (S_CMD_O_POLL and + _DLY):
		flags: 0b00DT0BBB where T = toggle mode = 1 / data mode = 0, D = data bit in data mode,
			B = bit to monitor (0-7). Unused bits (0) are not checked on device.
		Implements algorithm to wait for flash chip to be ready before continuing opbuf
		execution (pseudocode with C-like operators):
			i = 0
			mask = 1 << bit
			if (toggle mode)
				tmp1 = flash_read(addr) & mask
			else
				tmp1 = data_bit ? mask : 0

			while (i++ < 0xFFFFFFF)  // Device can adjust timeout relative to own speed
				delay (if _DLY version)
				tmp2 = flash_read(addr) & mask
				if (tmp1 == tmp2) break
				if (toggle mode) tmp1 = tmp2

	About mandatory commands:
		The only truly mandatory commands for any device are 0x00, 0x01, 0x02 and 0x10,
		but one can't really do anything with these commands.
		Support for the following commands is necessary for flashrom to operate properly:
		S_CMD_Q_SERBUF, S_CMD_Q_OPBUF, S_CMD_Q_WRNMAXLEN, S_CMD_R_BYTE,
		S_CMD_R_NBYTES, S_CMD_O_INIT, S_CMD_O_WRITEB, S_CMD_O_WRITEN,
		S_CMD_O_DELAY, S_CMD_O_EXEC.
		In addition, support for these commands is recommended:
		S_CMD_Q_PGMNAME, S_CMD_Q_BUSTYPE, S_CMD_Q_CHIPSIZE (if parallel).

About Tokens
------------
Token support is optional - existence of opcode 0x16 Token NOP is used
to determine support, and is used by flashrom to get the next token that
would've been used, both for initialization of expected token values and
maybe for diagnostic purposes like to see if a command was received but
the reply was lost or it wasnt received at all.

Note: Token NOP does not increment the token, and also returns ACK first.

Without token support every opcode with "TKN" as reply shall have "ACK" instead.

Invalid token values are used to detect lost bytes 
in the receive channel or a sudden reset of the programming device.

Note: rollower to 1 instead of 0 both allows sure detection of devices being
accidentally reset _and_ makes the repeat period a prime number (127) which
should detect better overflown power-of-2 buffers or such errors even if
lots of data was lost.

Operation buffer details and rationale
--------------------------------------
The operation buffer is an area of memory on the programming device used to hold
write-related operations so they can be executed in quick succession after
the whole operation has been transferred to the device.
This is required (with some non-SPI chips) to be able to perform a page load
quickly enough if connection is a slow serial, since they have a page load timeout.

The operations in opbuf take the same amount of space/bytes they used on-wire when
being transferred, but the representation of them in the opbuf is upto the implementation.

Write to opbuf operations should return NAK in case of an attempted buffer overflow,
but the state of the buffer after such a NAK is unknown and the programmer
should be reinitialized (atleast S_CMD_O_INIT) if this happens.

S_CMD_O_INIT is meant to be only used when the device is in unknown state,
meaning once in the beginning of operations. S_CMD_O_EXEC will attempt to execute
the operation buffer and _always_ clear it after the attempt. It can return NAK
in the case of a programmer internal error (hw fail/bug), but there are no
"normal"/expected error conditions except previous overflow attempt
(which is not a normal operation either).

For SPI-only devices the opbuf support is delays-only (SPIOP is immediate),
and both of these implementation styles are allowed:
1:
O_INIT clears internal delay count
O_DELAY adds to internal delay count
O_EXEC "executes" internal delay count
2:
O_INIT is a nop
O_DELAY executes specified delay
O_EXEC is a nop and doesnt need to be implemented


See also serprog.h.
